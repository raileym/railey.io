[ctns_make id='quadQ2-4']

    [ctns_description]
Given a quadratic function, find the axis of symmetry, the vertex, and two points on the graph.
    [/ctns_description]
    
    [ctns_question]
TMPL_QUESTIONBLOCK<br>TMPL_GRAPHICBLOCK
    [/ctns_question]
    
    [ctns_script]
    do {
        symbols.a = [-3, -2, -1, 1, 2, 3].ctns_rand();
        symbols.b = symbols.a*2*[-1, -2, 0, 1, 2].ctns_rand();
        symbols.c = [-2, -1, 0, 1, 2].ctns_rand();

        symbols.h = symbols.b / (-2 * symbols.a),
        symbols.k = symbols.a * Math.pow(symbols.h, 2) + symbols.b * symbols.h + symbols.c;
    } while (is_lt(symbols.h,-5) || is_lt(symbols.k,-2) || is_gt(symbols.h,5) || is_gt(symbols.k,2) );

    symbols.h_ = d2f( symbols.h );
    symbols.k_ = d2f( symbols.k );
    symbols.h_double = 2*symbols.h;

    var b_div_a = d2f( symbols.b / symbols.a ),
        half_b_div_a = d2f( symbols.b / (2 * symbols.a ) ),
        half_b_div_a_squared = d2f( Math.pow(symbols.b / (2 * symbols.a ), 2) ),
        half_b_div_a_neg = d2f( -1 * symbols.b / (2 * symbols.a ) ),
        combined_constant = d2f( symbols.c - symbols.a * Math.pow(symbols.b / (2 * symbols.a ), 2) );

    if (symbols.b !== 0) {
        symbols.EQ  = "f(x)= %s x ^2 + %s x + %s".ctns_format([symbols.a, symbols.b, symbols.c]).ctns_equation();
        symbols.chosen_x = 0;
    } else {
        symbols.EQ  = "f(x)= %s x ^2 + %s".ctns_format([symbols.a, symbols.c]).ctns_equation();
        symbols.chosen_x = 1;
    }

    symbols.EQ2 = "f(x)= %s (x ^2 + %s x) + %s".ctns_format([symbols.a, b_div_a, symbols.c]).ctns_equation();
    symbols.EQ3 = "f(x)= %s (x ^2 + %s x + %s - %s) + %s".ctns_format([symbols.a, b_div_a, half_b_div_a_squared, half_b_div_a_squared, symbols.c]).ctns_equation();
    symbols.EQ4 = "f(x)= %s (x ^2 + %s x + %s) - %s (%s) + %s".ctns_format([symbols.a, b_div_a, half_b_div_a_squared,     symbols.a, half_b_div_a_squared, symbols.c]).ctns_equation();
    symbols.EQ5 = "f(x)= %s (x + %s)^2 + %s".ctns_format([symbols.a, half_b_div_a, combined_constant]).ctns_equation();
    symbols.vertex   = "(%s, %s)".ctns_format([half_b_div_a_neg, combined_constant]).ctns_equation();
    symbols.factored = "x(%s x + %s)".ctns_format([symbols.a, symbols.b]).ctns_equation();
    
    symbols.f_of_minus_one = symbols.a * Math.pow(-1, 2) + symbols.b * (-1) + symbols.c;
    symbols.f_of_plus_one  = symbols.a * Math.pow( 1, 2) + symbols.b * ( 1) + symbols.c;
    symbols.f_of_minus_one_ = d2f( symbols.f_of_minus_one );
    symbols.f_of_plus_one_  = d2f( symbols.f_of_plus_one );

    q.push('
Given a quadratic function $$f$$ in standard form $| ${EQ}, |$
find the axis of symmetry, the vertex, and two points on the graph.
<hr style="width:50%;">
From the quadratic function $$f$$ in standard form $| ${EQ}, |$
extract the leading coefficients as the three constants
$|a=${a}, b=${b}, c=${c}.|$
The <span>axis of symmetry</span> is
the vertical line
$|x = \frac{-b}{2a} \textrm{ or } \color{red}x = ${h_} ,|$
and the <span>vertex</span> of the graph is the point
$|(\frac{-b}{2a}, f(\frac{-b}{2a})) = (${h_}, f(${h_})) = \color{blue}{(${h_}, ${k_})}.|$
');

    if (symbols.b === 0) {

        symbols.p1_x = -1;
        symbols.p1_y = symbols.a * Math.pow(symbols.p1_x, 2) + symbols.b * (symbols.p1_x) + symbols.c;
        symbols.p2_x = 1;
        symbols.p2_y = symbols.a * Math.pow(symbols.p2_x, 2) + symbols.b * (symbols.p2_x) + symbols.c;

        q.push('
Because $$b = 0$$, choose <span>two points</span>, one each for $$x = ${p1_x}$$ and $$x = ${p2_x}$$,
$|(${p1_x}, f(${p1_x})) = \color{blue}{(${p1_x},${p1_y})}|$
and
$|(${p2_x}, f(${p2_x})) = \color{blue}{(${p2_x},${p2_y})}|$
');
    } else {
        symbols.p1_x = 0;
        symbols.p1_y = symbols.c;
        symbols.p2_x = symbols.h_double;
        symbols.p2_y = symbols.c;

        q.push('
Because $$b \ne 0$$, choose two points, the $$y$$-intercept as one point,
$|(0, f(0)) = \color{blue}{(0, ${c})}|$
and the reflection of the $$y$$-intercept across the axis of
symmetry as the other,
$| (\frac{-b}{a}, ${c}) = \color{blue}{(${h_double}, ${c})}.|$
');
    }

    $(qblock).html(tex({"symbols":symbols}, q.join(' ')));
    
    [/ctns_script]
    
    [ctns_shortcode]
[graph height='300' width='300' yaxislabel_ycoord='9.5' xaxislabel_xcoord='8.75' boundingbox='-6,6,6,-6']
[point id='a' coordinates='( function() { return st.a;}, function() { return 0;} )' labeloffsetx='0' labeloffsety='0' showpoint='false' showlabel='false' showcoordinates='false' animate='false']	 	 
[point id='b' coordinates='( function() { return st.b;}, function() { return 0;} )' labeloffsetx='0' labeloffsety='0' showpoint='false' showlabel='false' showcoordinates='false' animate='false']	 	 
[point id='c' coordinates='( function() { return st.c;}, function() { return 0;} )' labeloffsetx='0' labeloffsety='0' showpoint='false' showlabel='false' showcoordinates='false' animate='false']	 	 
[point id='v' coordinates='( function() { return st.h;}, function() { return st.k;} )' labeloffsetx='0' labeloffsety='0' showpoint='true' showlabel='false' showcoordinates='false' animate='false']	 	 
[point id='p1' coordinates='( function() { return st.p1_x;}, function() { return st.p1_y;} )' showpoint='true' showlabel='false' showcoordinates='false' animate='false']	 	 
[point id='p2' coordinates='( function() { return st.p2_x;}, function() { return st.p2_y;} )' showpoint='true' showlabel='false' showcoordinates='false' animate='false']	 	 
[point id='top'    coordinates='( function() { return st.h;}, function() { return  6;} )' labeloffsetx='0' labeloffsety='0' showpoint='false' showlabel='false' showcoordinates='false' animate='false']	 	 
[point id='bottom' coordinates='( function() { return st.h;}, function() { return -6;} )' labeloffsetx='0' labeloffsety='0' showpoint='false' showlabel='false' showcoordinates='false' animate='false']	 	 
[segment start='top' end='bottom' style='dashed' color='red']
[function color='black' variable='x' constants='a,b,c' min='-6' max='6']a.x*pow(x, 2)+b.x*x + c.x[/function]	 	 
[/graph]	 	 
    [/ctns_shortcode]

    [ctns_element type="build_a_graph" height="300" width="300"][/ctns_element]

[/ctns_make]
