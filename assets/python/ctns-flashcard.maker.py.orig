ZWRAP           = "%s\n"
WRAP           = "\n%s\n"
RWRAP           = "\n%s\n  "
SWRAP           = "\n  %s  \n"
CTNS_MAKE           = "[ctns_make id='%s']%s[/ctns_make]"
CTNS_FRONT          = "[ctns_front]%s[/ctns_front]"
CTNS_BACK           = "[ctns_back]%s[/ctns_back]"
CTNS_FRONTSPEAK     = "[ctns_frontspeak]%s[/ctns_frontspeak]"
CTNS_BACKSPEAK      = "[ctns_backspeak]%s[/ctns_backspeak]"
CTNS_PROBLEM_HEIGHT = "[ctns_problem_height]%s[/ctns_problem_height]"
CTNS_PROBLEM_WIDTH  = "[ctns_problem_width]%s[/ctns_problem_width]"

def frontspeak(text):
    if text == "":
        return ""
    else:
        return SWRAP % CTNS_FRONTSPEAK % RWRAP % text

def backspeak(text):
    if text == "":
        return ""
    else:
        return SWRAP % CTNS_BACKSPEAK % RWRAP % text

def flashcard_make(slide_data):

    for slide in slide_data:

        name = '_'.join( (slide['set_name']+'_'+slide['front']).split() )
        result = ZWRAP % CTNS_MAKE % (name , WRAP % ( 
            SWRAP % CTNS_FRONT % RWRAP % slide['front'] 
          + SWRAP % CTNS_BACK % RWRAP % slide['back']
          + frontspeak(slide['frontspeak'])
          + backspeak(slide['backspeak'])
        ))
        fp = open( name, "w")
        fp.write(result)
        fp.close()

slide_data = [
   {'set_name': 'basic',   'front': 'origin',        'back': 'The origin is the point on a number line marked as zero (0).',    'frontspeak': 'origin', 'backspeak': ''}
 , {'set_name': 'basic',   'front': 'unit distance', 'back': 'The unit distance is the distance from 0 to 1 on a number line.', 'frontspeak': '', 'backspeak': 'unit distance'}
 , {'set_name': 'basic',   'front': 'elements',      'back': 'The members of a set are called elements.',                       'frontspeak': '', 'backspeak': ''}
 , {'set_name': 'basic',   'front': 'empty set',     'back': 'The empty set is the set that contains no elements.',             'frontspeak': 'empty set', 'backspeak': 'The empty set is the set that contains no elements.'}
]

flashcard_make(slide_data)
