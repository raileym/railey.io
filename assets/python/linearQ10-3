[ctns_make id='linearQ10-3']

    [ctns_question]
TMPL_QUESTIONBLOCK
    [/ctns_question]
    
    [ctns_answer]
TMPL_ANSWERBLOCK
    [/ctns_answer]
    
    [ctns_script]
        /* random m, b, x, and y */
        symbols.m = [1, 2, 3, -1, -2, -3].ctns_rand();
        symbols.b = [1, 2, 3, -1, -2, -3].ctns_rand();
        symbols.x = [1, 2, 3, -1, -2, -3].ctns_rand();
        symbols.y = [1, 2, 3, -1, -2, -3].ctns_rand();
        
        /* compute and format the negative reciprocal and the value
         * for the y-intercept b
         */
        symbols.m_ = d2f(-1/symbols.m);
        symbols.b_ = d2f(symbols.y + symbols.x/symbols.m); /* this is how the equation works out, btw */
        
        
        /* colorize values x, y, b, and m differently for q and a */
        symbols.q_m = colorized.ctns_format(['transparent', symbols.m_]);
        symbols.q_b = colorized.ctns_format(['transparent', symbols.b_]);
        symbols.q_x = colorized.ctns_format(['transparent', symbols.x]);
        symbols.q_y = colorized.ctns_format(['transparent', symbols.y]);

        symbols.a_m = colorized.ctns_format(['blue', symbols.m_]);
        symbols.a_b = colorized.ctns_format(['blue', symbols.b_]);
        symbols.a_x = colorized.ctns_format(['blue', symbols.x]);
        symbols.a_y = colorized.ctns_format(['blue', symbols.y]);
        
        symbols.eq  = 'y = %s x + %s'.ctns_format([symbols.m,  symbols.b ]).ctns_equation();
        symbols.eq_ = 'y = %s x + %s'.ctns_format([symbols.m_, symbols.b_]).ctns_equation();

        symbols.q_eq = colorized.ctns_format(['transparent', symbols.eq_]);
        symbols.a_eq = colorized.ctns_format(['blue', symbols.eq_]);

        /* Build the QUESTION */
        q.push('
Find the particular equation of a line that contains the point $$( ${x}, ${y} )$$ and
is perpendicular to the line, 
$| ${eq} .|$

<br><button class="ctns-button ctns-toggle-answer">Show Answer</button>
<button class="ctns-button ctns-toggle-hint">Hint</button>
<div class="ctns-hint ctns-hide">
Finding the equation of a line requires knowing its slope $$m$$ and one point $$(x, y)$$ on the line. Here, you are given the
slope $$m = ${m}$$ from the equation of a perpendicular line and a point $$( ${x}, ${y} )$$ on the desired line. <br><br>Taking the negative reciprocal of the perpendicular slope 
$$m = ${m}$$ gives you the slope $$m = ${m_}$$ of the desired line. With the point $$( ${x}, ${y} )$$ and the new slope $$m = ${m_}$$, you now have everything 
necessary to express your new equation in slope-intercept form. 
<hr style="width:50%;clear:both;margin:2em auto;">
From slope-intercept form $$y = m x +b$$, <br>
you get $$y - mx = b$$ or rather<br><br>
$$b = y - m x.$$ <br><br>
With $$m = \boxed { ${q_m} }$$ and $$(x_1,y_1) = \boxed { ( ${q_x}, ${q_y} ) },$$ then<br><br>
$$b = \boxed{ ${q_y} } - \boxed { ${q_m} } \cdot \boxed { ${q_x} } = \boxed { ${q_b} }.$$<br><br>
With $$y = m x +b$$, then<br><br>
$$y = \boxed { ${q_m} } x + \boxed{ ${q_b} }$$ or<br><br>
$$ \boxed{ ${q_eq} } $$
</div>
'); 
    
        /* BTW, the answer-version is derived from the question-version. Do not
         * forget to switch hint hide to hint show
         */
        $(qblock).html(tex({'symbols':symbols}, q.join(' ')));
        $(ablock).html(tex({'symbols':symbols}, q.join(' ').replace(/q_/g,'a_').replace(/ctns-hint ctns-hide/,'ctns-hint ctns-show')));
    [/ctns_script]
    
[/ctns_make]

