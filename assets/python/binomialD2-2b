[ctns_make id='binomialD2-2b']

    [ctns_description]
Use FOIL to multiply two binomials.
    [/ctns_description]
    
    [ctns_script]
        var dividendDegree,
            isReducible,
            dividend = [];

        dividendDegree = 2;

        symbols.lead = [];
        symbols.red_lead = [];
        for ( var i=0; is_lt(i, dividendDegree); i++ ) {
        
            do {
                var lead = ['x'].ctns_rand();
            } while ( false /*symbols.lead.includes(lead)*/ );
            
            symbols.lead.push( lead );
            symbols.red_lead.push( "\textcolor{red}{%s}".ctns_format([lead]) );
            
        }

        symbols.zero = [];
        symbols.red_zero = [];
        for ( var i=0; is_lt(i, dividendDegree); i++ ) {
        
            do {
                /*var zero = ['+a+b', '-a-b'].ctns_rand();*/
                /*var zero = ['+4a+4b', '+3a+3b', '+2a+2b', '+a+b', '-a-b', '-2a-2b', '-3a-3b', '-4a-4b'].ctns_rand();*/
                /*var zero = ['+4y', '+3y', '+2y', '+y', '-y', '-2y', '-3y', '-4y'].ctns_rand();*/
                var zero = ['+4', '+3', '+2', '+1', '-1', '-2', '-3', '-4'].ctns_rand();
            } while ( symbols.zero.includes(zero) );
            
            symbols.zero.push( zero );
            symbols.red_zero.push( "\textcolor{red}{%s}".ctns_format([zero]) );
            
        }

        /* choosing to be tricky here: I am abusing the forEach. */
        symbols.dividend = [];
        [0, 1].forEach(function(idx) {
            symbols.dividend.push( "(%s)".ctns_format([ "%s %s".ctns_format([ symbols.lead[idx], symbols.zero[idx] ]) ]) );
        });
        
        symbols.problem = symbols.dividend.join("");
        
        q.push('
Use F-O-I-L to multiply out the expression
$| f(x) = ${problem}. |$
        ');

        symbols.first = [];
        symbols.first.push( "(%s %s)".ctns_format([ symbols.red_lead[0], symbols.zero[0] ]) );
        symbols.first.push( "(%s %s)".ctns_format([ symbols.red_lead[1], symbols.zero[1] ]) );
        
        symbols.first_problem = "f(x) = %s".ctns_format([ symbols.first.join("") ]);
        symbols.first_title = "\textcolor{red}{First}-O-I-L";
        symbols.first_result = "\textcolor{red}{%s}".ctns_format([ "(%s) * (%s)".ctns_format([symbols.lead[0], symbols.lead[1]]).ctns_expand() ]);

        q.push('
$| 
\begin{gathered}
${first_title} \\[10pt]
${first_problem} \\[10pt]
${first_result}
\end{gathered}
|$
        ');

        /* Cannot use ctns_equation because of the formatting */
        symbols.outside = [];
        symbols.outside.push( "(%s %s)".ctns_format([ symbols.red_lead[0], symbols.zero[0]     ]) );
        symbols.outside.push( "(%s %s)".ctns_format([ symbols.lead[1],     symbols.red_zero[1] ]) );
        
        symbols.outside_problem = "%s".ctns_format([ symbols.outside.join("") ]);
        symbols.outside_title = "F-\textcolor{red}{Outside}-I-L";
        symbols.outside_result = "\textcolor{red}{%s}".ctns_format([ "(%s) * (%s)".ctns_format([symbols.lead[0], symbols.zero[1]]).ctns_expand() ]);

        q.push('
$| 
\begin{gathered}
${outside_title} \\[10pt]
${outside_problem} \\[10pt]
${outside_result}
\end{gathered}
|$
        ');

        symbols.inside = [];
        symbols.inside.push( "(%s %s)".ctns_format([ symbols.lead[0],     symbols.red_zero[0] ]) );
        symbols.inside.push( "(%s %s)".ctns_format([ symbols.red_lead[1], symbols.zero[1]     ]) );
                
        symbols.inside_problem = "%s".ctns_format([ symbols.inside.join("") ]);
        symbols.inside_title = "F-O-\textcolor{red}{Inside}-L";
        /* Order on multiply is significant: helps with x y ordering */
        symbols.inside_result = "\textcolor{red}{%s}".ctns_format([ "(%s) * (%s)".ctns_format([symbols.lead[1], symbols.zero[0]]).ctns_expand() ]);

        q.push('
$| 
\begin{gathered}
${inside_title} \\[10pt]
${inside_problem} \\[10pt]
${inside_result}
\end{gathered}
|$
        ');

        symbols.last = [];
        symbols.last.push( "(%s %s)".ctns_format([ symbols.lead[0], symbols.red_zero[0] ]) );
        symbols.last.push( "(%s %s)".ctns_format([ symbols.lead[1], symbols.red_zero[1] ]) );
                
        symbols.last_problem = "%s".ctns_format([ symbols.last.join("") ]);
        symbols.last_title = "F-O-I-\textcolor{red}{Last} ";
        symbols.last_result = "\textcolor{red}{%s}".ctns_format([ "(%s) * (%s)".ctns_format([symbols.zero[0], symbols.zero[1]]).ctns_expand() ]);


        q.push('
$| 
\begin{gathered}
${last_title} \\[10pt]
${last_problem} \\[10pt]
${last_result}
\end{gathered}
|$
        ');

        if ("undefined" === typeof symbols.getZero) {
            symbols.getZero = (function(symbols) {
                return function(idx) {
                    return symbols.zero[idx];
                };
            })(symbols);
        }

        if ("undefined" === typeof symbols.getAsymptote) {
            symbols.getAsymptote = (function(symbols) {
                return function(idx) {
                    return symbols.asymptotes[idx];
                };
            })(symbols);
        }
  
        symbols.problem = symbols.dividend.join("");

        symbols.expanded = symbols.dividend.join("").ctns_expand();
            
        q.push('
$| 
\begin{aligned}
f(x) =& ${problem} \\[10pt]
     =& ${expanded}
\end{aligned}
|$
        ');

        $(qblock).html(tex({"symbols":symbols}, q.join(' ')));
            
    [/ctns_script]
    
[/ctns_make]
